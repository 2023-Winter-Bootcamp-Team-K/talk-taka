version: '3'

services:
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_USER_PASSWORD}
    ports:
      - "3307:3306"
    env_file:
      - .env
    networks:
      - ai_net


  web:
    build:
      context: backend/backend
      dockerfile: Dockerfile
    restart: always
    command: sh -c "dockerize -wait tcp://db:3306 -timeout 1m
      && python manage.py makemigrations users
      && python manage.py makemigrations apps
      && python manage.py makemigrations diary
      && python manage.py migrate
      && python manage.py runserver 0.0.0.0:8000
      && daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - ai_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/frontend
#      - ./frontend/dist:/frontend/dist:rw
      - /frontend/node_modules
      - ./frontend/dist:/var/www/frontend:rw
    tty: true
    stdin_open: true
    depends_on:
      - web
    networks:
      - ai_net

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    networks:
      - ai_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/var/www/frontend
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf # 호스트의 nginx 폴더와 컨테이너의 /etc/nginx/conf.d 폴더를 공유
    depends_on:
      - web
      - frontend


  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ai_net


  celery:
    container_name: celery
    build:
      context: ./backend/backend  # Celery를 빌드할 컨텍스트를 backend 디렉토리로 지정
    command: "celery -A config.celery worker --loglevel=info --pool=prefork" #worker추가
    depends_on:
      - rabbitmq  # Celery는 RabbitMQ에 의존하므로 여기에 명시
    volumes:
      - ./backend/backend:/app  # 현재 디렉토리를 backend로 변경하여, backend 코드를 컨테이너의 /app으로 마운트
    environment:
      - amqp://guest:guest@rabbitmq:5672//  # Django 설정 환경 변수 추가
    env_file:
      - .env
    networks:
      - ai_net


  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8081:8080"  # cAdvisor의 내부 8080 포트를 호스트의 8081 포트에 바인딩
    restart: always


  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    links:
      - cadvisor
    volumes:
      - ./backend/monitoring/prometheus/:/etc/prometheus/
    user: root
    depends_on:
      - cadvisor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ai_net


  grafana:
    build:
      context: ./backend/monitoring/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ai_net


  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
    restart: always
    networks:
      - ai_net


networks:
  ai_net:
    driver: bridge
